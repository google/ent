// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: proto/ent_server_api.proto

package ent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntClient is the client API for Ent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntClient interface {
	MapGet(ctx context.Context, in *MapGetRequest, opts ...grpc.CallOption) (*MapGetResponse, error)
	MapSet(ctx context.Context, in *MapSetRequest, opts ...grpc.CallOption) (*MapSetResponse, error)
	GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error)
}

type entClient struct {
	cc grpc.ClientConnInterface
}

func NewEntClient(cc grpc.ClientConnInterface) EntClient {
	return &entClient{cc}
}

func (c *entClient) MapGet(ctx context.Context, in *MapGetRequest, opts ...grpc.CallOption) (*MapGetResponse, error) {
	out := new(MapGetResponse)
	err := c.cc.Invoke(ctx, "/ent.server.api.Ent/MapGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entClient) MapSet(ctx context.Context, in *MapSetRequest, opts ...grpc.CallOption) (*MapSetResponse, error) {
	out := new(MapSetResponse)
	err := c.cc.Invoke(ctx, "/ent.server.api.Ent/MapSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entClient) GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error) {
	out := new(GetEntryResponse)
	err := c.cc.Invoke(ctx, "/ent.server.api.Ent/GetEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntServer is the server API for Ent service.
// All implementations must embed UnimplementedEntServer
// for forward compatibility
type EntServer interface {
	MapGet(context.Context, *MapGetRequest) (*MapGetResponse, error)
	MapSet(context.Context, *MapSetRequest) (*MapSetResponse, error)
	GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error)
	mustEmbedUnimplementedEntServer()
}

// UnimplementedEntServer must be embedded to have forward compatible implementations.
type UnimplementedEntServer struct {
}

func (UnimplementedEntServer) MapGet(context.Context, *MapGetRequest) (*MapGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapGet not implemented")
}
func (UnimplementedEntServer) MapSet(context.Context, *MapSetRequest) (*MapSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapSet not implemented")
}
func (UnimplementedEntServer) GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntry not implemented")
}
func (UnimplementedEntServer) mustEmbedUnimplementedEntServer() {}

// UnsafeEntServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntServer will
// result in compilation errors.
type UnsafeEntServer interface {
	mustEmbedUnimplementedEntServer()
}

func RegisterEntServer(s grpc.ServiceRegistrar, srv EntServer) {
	s.RegisterService(&Ent_ServiceDesc, srv)
}

func _Ent_MapGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntServer).MapGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ent.server.api.Ent/MapGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntServer).MapGet(ctx, req.(*MapGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ent_MapSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntServer).MapSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ent.server.api.Ent/MapSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntServer).MapSet(ctx, req.(*MapSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ent_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ent.server.api.Ent/GetEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntServer).GetEntry(ctx, req.(*GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ent_ServiceDesc is the grpc.ServiceDesc for Ent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ent.server.api.Ent",
	HandlerType: (*EntServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MapGet",
			Handler:    _Ent_MapGet_Handler,
		},
		{
			MethodName: "MapSet",
			Handler:    _Ent_MapSet_Handler,
		},
		{
			MethodName: "GetEntry",
			Handler:    _Ent_GetEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ent_server_api.proto",
}
