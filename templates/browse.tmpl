<link href="/static/tailwind.min.css" rel="stylesheet" />

<body class="p-10">
  <div class="divide-y-2 divide-blue-500 border-2 border-blue-500 rounded-lg">
    <div class="p-2 flex">
      <div
        class="px-2 bg-yellow-100 hover:bg-yellow-300 border border-yellow-200 rounded-lg w-min"
      >
        <a href="{{ .node.URL }}">{{ .digest }}</a>
      </div>
      <div
        class="px-2 bg-yellow-100 hover:bg-yellow-300 border border-yellow-200 rounded-lg w-min"
      >
        <a href="{{ .node.WWWURL }}">www</a>
      </div>
      {{ range.node.PathSegments }}
      <div>
        <div class="inline px-1">/</div>
        <a class="underline" href="{{ .URL }}">{{ .Name }}</a>
      </div>
      {{ end }}
    </div>
    {{ with.node.ParentURL }}
    <a href="{{ . }}" class="block p-2 hover:bg-blue-200 font-mono flex">
      <div class="px-2 text-blue-500">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"
          />
        </svg>
      </div>
      <div class="px-2 flex-1">..</div>
    </a>
    {{ end }}

    {{/* dirs */}}
    {{ range.node.Links }}
    <a href="{{ .URL }}" class="block p-2 hover:bg-blue-200 font-mono flex">
      <div class="px-2 text-blue-500" onclick="rename()">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"
          />
        </svg>
      </div>
      <div class="px-2 flex-1">
        {{ .Selector.FieldID }}[{{ .Selector.Index }}]
      </div>
      <div
        class="px-2 hover:text-red-500"
        title="delete"
        onclick="deleteLink(event, '{{ .Selector.FieldID }}[{{ .Selector.Index }}]')"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
          />
        </svg>
      </div>
      <div
        class="px-2 bg-yellow-100 border border-yellow-200 rounded-lg text-xs h-4"
      >
        {{ .Digest }}
      </div>
    </a>
    {{ end }}

    {{ if eq .type "file" }}
    <div
      class="font-mono whitespace-pre"
      contenteditable="false"
      id="blob"
      oninput="fileChange()"
    >
      {{- .blob_str -}}
    </div>
    {{ end }}
  </div>

  {{ if .node }}
  <div class="hidden">
    <form action="?" method="post" enctype="multipart/form-data">
      <h2 class="text-lg">Add Files</h2>
      <input type="file" id="file" name="file" multiple="multiple" />
      <!-- <div>
			Add Dir:
			<input type="file" id="file" name="directory" webkitdirectory>
		</div> -->
      <input
        type="submit"
        class="bg-blue-500 hover:bg-blue-700 text-white py-2 px-4 rounded"
      />
    </form>
  </div>
  {{ end }}

  <script>
    function fileChange() {
      const blob = document.getElementById('blob');
      const save = document.getElementById('save_button');
      save.disabled = false;

      console.log('change');
    }

    async function uploadFiles() {
      const fileSelect = document.getElementById('file_input');
      fileSelect.click();
    }

    // https://stackoverflow.com/a/36046727/269518
    ToBase64 = function (u8) {
      var u8 = new Uint8Array(u8);
      return btoa(String.fromCharCode.apply(null, u8));
    };

    function _arrayBufferToBase64(buffer) {
      var binary = '';
      var bytes = new Uint8Array(buffer);
      var len = bytes.byteLength;
      for (var i = 0; i < len; i++) {
        binary += String.fromCharCode(bytes[i]);
      }
      return window.btoa(binary);
    }

    async function fileInputChange() {
      const fileSelect = document.getElementById('file_input');
      var request = {
        root: '{{ .root }}',
        blobs: [],
      };
      for (f of fileSelect.files) {
        const data = await new Response(f).arrayBuffer();
        const b64data = _arrayBufferToBase64(data);
        request.blobs.push({
          type: 'file',
          path: '{{ .path }}/' + f.name,
          content: b64data,
        });
      }
      console.log(request);
      const response = await fetch('/api/update', {
        method: 'POST',
        body: JSON.stringify(request),
      });
      const responseJson = await response.json();
      console.log(responseJson);
      const root = responseJson.Root;
      window.location = '/blobs/' + root + '/{{ "$path" }}';
    }

    async function createEmptyDir() {
      const name = prompt('New dir name');
      if (name == null) {
        return;
      }
      const response = await fetch('/api/update', {
        method: 'POST',
        body: JSON.stringify({
          root: '{{ .root }}',
          blobs: [
            {
              type: 'directory',
              path: '{{ .path }}/' + name,
              content: '',
            },
          ],
        }),
      });
      const responseJson = await response.json();
      console.log(responseJson);
      const root = responseJson.Root;
      window.location = '/blobs/' + root + '/{{ "$path" }}';
    }

    async function createEmptyFile() {
      const name = prompt('New file name');
      if (name == null) {
        return;
      }
      const response = await fetch('/api/update', {
        method: 'POST',
        body: JSON.stringify({
          root: '{{ .root }}',
          blobs: [
            {
              type: 'file',
              path: '{{ .path }}/' + name,
              content: '',
            },
          ],
        }),
      });
      const responseJson = await response.json();
      console.log(responseJson);
      const root = responseJson.Root;
      window.location = '/blobs/' + root + '/{{ "$path" }}';
    }

    async function renameLink(e, linkName) {
      e.preventDefault();
      console.log(e, linkName);
      const newName = prompt('New name', linkName);
      if (newName == null) {
        return;
      }
      const response = await fetch('/api/rename', {
        method: 'POST',
        body: JSON.stringify({
          root: '{{ .root }}',
          fromPath: '{{ .path }}/' + linkName,
          toPath: '{{ .path }}/' + newName,
        }),
      });
      const responseJson = await response.json();
      console.log(responseJson);
      const root = responseJson.Root;
      window.location = '/blobs/' + root + '/{{ "$path" }}';
    }

    async function deleteLink(e, linkName) {
      const response = await fetch('/api/remove', {
        method: 'POST',
        body: JSON.stringify({
          root: '{{ .root }}',
          path: '{{ .path }}/' + linkName,
        }),
      });
      const responseJson = await response.json();
      console.log(responseJson);
      window.location = responseJson.RedirectURL;
    }

    async function browseLink(e, linkName) {
      e.preventDefault();
      const url =
        'http://{{ .root }}.{{ .wwwHost }}/{{ with .path }}{{ . }}/{{ end }}' +
        linkName;
      window.open(url);
    }

    async function save() {
      const blob = document.getElementById('blob');
      const save = document.getElementById('save_button');
      console.log('save & branch', blob.innerText);
      const response = await fetch('/api/update', {
        method: 'POST',
        body: JSON.stringify({
          root: '{{ .root }}',
          blobs: [
            {
              type: 'file',
              path: '{{ .path }}',
              content: btoa(blob.innerText),
            },
          ],
        }),
      });
      const responseJson = await response.json();
      console.log(responseJson);
      const root = responseJson.Root;
      window.location = '/blobs/' + root + '{{ "$path" }}';
    }
  </script>
</body>
